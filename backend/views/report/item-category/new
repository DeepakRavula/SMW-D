payment model -> has many lessons.
payment model ->has one payment frequency.
payment model -> has multiple invoices.


one to one relation
public function OneStudent() {
    return $query
}
hasmany()
csrf - 
php security issue
indexing -> 
perfomance
design pattern.
yii framework features.
filters
events
trait
code snippet
er diagram(lusi chart)

return $this->joinWith(['course' => function ($query) use ($currentDate) {
            $query->joinWith(['lessons' => function ($query) {
                $query->andWhere(['NOT', ['lesson.id' => null]]);
            }])
                ->andWhere(['>', 'DATE(course.endDate)', $currentDate])
                ->regular()
                ->confirmed()
                ->notDeleted();
        }]);




public function getCourseSchedule()
    {
        return $this->hasOne(CourseSchedule::className(), ['courseId' => 'id'])
            ->orderBy(['course_schedule.id' => SORT_DESC])
            ->via('course');
    }
    $location = location::find()
        ->joinWith(['leesons' => function ($query) {
            $query->andWhere(['NOT', ['LESSon.id' => null]])
        }])
        ->andWhere(['>', 'DATE(COURSE.ENDDATE);, $currentDate])
         ->andWhere(['NOT IN', 'course.id', $groupEnrolments])

 public function getCourse()
    {
        return $this->hasOne(Course::className(), ['id' => 'courseId'])
            ->onCondition(['course.isDeleted' => false]);
    }


    public function getStudent() {
        return $this->hasOne(Student::className(), ['id' => 'studentId'])
            ->onCondition(['course.isDeleted' => false])
    }


like DB_DATABASE